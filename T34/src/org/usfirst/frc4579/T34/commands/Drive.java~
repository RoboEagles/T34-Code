// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.T34.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc4579.T34.Robot;

import com.RoboEagles4579.filters.FirstOrderLPF;

/**
 *
 */
public class  Drive extends Command {

	private double x = 0.0,
 		   		   y = 0.0,
 		   		   z = 0.0,
 		   		   angle = 0.0;
	private FirstOrderLPF lpfx = new FirstOrderLPF(),
						  lpfy = new FirstOrderLPF(),
						  lpfz = new FirstOrderLPF();
	
    public Drive() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	x = lpfx.filter(Robot.oi.getJoystick().getX());
     	y = lpfy.filter(Robot.oi.getJoystick().getY());
     	z = lpfz.filter(Robot.oi.getJoystick().getZ());
     	angle = Robot.measurement.getAngle();
    	Robot.drivetrain.driveManual(x, y, z, angle);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.drivetrain.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}

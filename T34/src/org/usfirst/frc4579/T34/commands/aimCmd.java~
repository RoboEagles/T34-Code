// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4579.T34.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4579.T34.Robot;
/**
 *
 */
public class  aimCmd extends Command {
    
    private double percent = 0.0,
            lastPercent = 0.0;
    
    public aimCmd() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.aiming);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        update();
        Robot.aiming.enable(); //Enables aiming PID
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        
        update(); //Updates percent variable every cycle for computation of logic
        
        if(Robot.aiming.limitReached()) {
             /* This method contains code to handle when the
                cannon has hit a limit switch */
            limitReachedLogic();
        } else {
            //Sets cannon angle for the desired percent
            setAimingAnglePercent(percent);
        }
    }
    
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    
    // Called once after isFinished returns true
    protected void end() {
        Robot.aiming.stop(); // Sets angle to zero    
    }
    
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
    
    //Updates percent variable
    private void update() {
        percent = 1.0 - Robot.oi.getdriveStick().getThrottle(); 
        //Z Axis = GetThrottle on SAITEK ST290 PRO, AND THROTTLE DEFAULTS 1.0 LOW
        //Not applicable to logitech joystick
    }
    
    //Sets the angle of the aimer by percent for this command
    private void setAimingAnglePercent(double percent) {
        Robot.aiming.setAnglePercent(percent);
        lastPercent = percent;
    }
    
    //Logic to command aimer when the limit is reached
    private void limitReachedLogic() {
        
        if(Robot.aiming.getMaxAngleLimit()) {//If the cannon has too high of an angle
            if((lastPercent - percent) < 0) { // If the operator wants a smaller angle
                setAimingAnglePercent(percent);   
            }
        } else if(Robot.aiming.getMinAngleLimit()) { // If the cannon has too low of an angle
            if((lastPercent - percent) > 0) { // If the operater wants a greater angle
                setAimingAnglePercent(percent);
            }
        }
        
    }
}

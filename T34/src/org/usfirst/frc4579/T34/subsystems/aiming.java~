// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4579.T34.subsystems;
import org.usfirst.frc4579.T34.RobotMap;
import org.usfirst.frc4579.T34.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; 
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
/**
 *
 */
public class aiming extends PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Encoder angleEncoder = RobotMap.aimingangleEncoder;
    SpeedController aimMotor = RobotMap.aimingaimMotor;
    DigitalInput minAngleLimit = RobotMap.aimingminAngleLimit;
    DigitalInput maxAngleLimit = RobotMap.aimingmaxAngleLimit;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private static final double MAX_ANGLE = 45.0;
    private static final double MIN_ANGLE = 0.0;
    
    // Initialize your subsystem here
    
    public aiming() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("aiming", 1.0, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("aiming", "PIDSubsystem Controller", getPIDController());
        getPIDController().setOutputRange(-0.2, 0.2);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new aimCmd());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void setAngle(double angle) { //Angle in degrees; sets position of aiming mechanism
        
        double angleSetpoint = angle;
        
        /* Makes certain that the angle is not set beyond its limits */
        if(angle >= MAX_ANGLE) {
            angleSetpoint = MAX_ANGLE;
        } else if(angle <= MIN_ANGLE) {
            angleSetpoint = MIN_ANGLE;
        }
        
        setSetpoint(angleSetpoint);
        
    }
    
    public void setAnglePercent(double percent) {
        
        double setpoint = (MAX_ANGLE - MIN_ANGLE)*percent + MIN_ANGLE;
        setAngle(setpoint);
        
    }
    
    public double getAngle() {
        
        return returnPIDInput();
        
    }
    
    
    public boolean getMinAngleLimit() {
        
        return minAngleLimit.get();
        
    }
    
    public boolean getMaxAngleLimit() {
        return maxAngleLimit.get();
    }
    
    public boolean limitReached() {
        return getMaxAngleLimit() || getMinAngleLimit();
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return angleEncoder.pidGet();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        aimMotor.pidWrite(output);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
}

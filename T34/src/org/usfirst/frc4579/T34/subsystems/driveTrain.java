// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4579.T34.subsystems;
import com.RoboEagles4579.filters.FirstOrderLPF;
import com.RoboEagles4579.math.Vector2d;
import com.RoboEagles4579.math.Vector3d;
import org.usfirst.frc4579.T34.RobotMap;
import org.usfirst.frc4579.T34.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc4579.T34.Robot;


public class driveTrain extends Subsystem {
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController frontLeft_M = RobotMap.driveTrainfrontLeft_M;
    SpeedController frontRight_M = RobotMap.driveTrainfrontRight_M;
    SpeedController rearLeft_M = RobotMap.driveTrainrearLeft_M;
    SpeedController rearRight_M = RobotMap.driveTrainrearRight_M;
    RobotDrive driveBase = RobotMap.driveTraindriveBase;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private FirstOrderLPF xLPF = new FirstOrderLPF(0.25);
    private FirstOrderLPF yLPF = new FirstOrderLPF(0.25);
    private FirstOrderLPF zLPF = new FirstOrderLPF(0.25);
    
    private double targetRobotAngle = 0.0,
                   targetFieldPositionX = 0.0,
                   targetFieldPositionY = 0.0;
    
    private Vector3d targets = new Vector3d(0.0,0.0,0.0);
    
    private double xSensitivity = 0.25,
                   ySensitivity = 0.25,
                   zSensitivity = 0.25,
                   angleSensitivity = 1/180;
    
    public void drive(double x, double y, double z) {
        
        x = xLPF.filter(x) * xSensitivity;
        y = yLPF.filter(y) * ySensitivity;
        z = zLPF.filter(z) * zSensitivity;
        
        driveBase.mecanumDrive_Cartesian(x, 
                                         y,
                                         z, 
                                         Robot.measurement.getGyroAngle());
        
    }
    
    public void moveToTarget() {
        
        //P Controller
        double outputX = (targets.X - Robot.measurement.fieldCoordinates().X) * xSensitivity, 
               outputY = (targets.Y - Robot.measurement.fieldCoordinates().Y) * ySensitivity, 
               outputAngle = (targets.Z - Robot.measurement.getGyroAngle()) * angleSensitivity;

        
        
        driveBase.mecanumDrive_Cartesian(outputX, outputY, outputAngle, Robot.measurement.getGyroAngle());
        
    }

    public void setTargets(double fieldCoordinateX, double fieldCoordinateY, double robotAngle) {
        
        targets.X = fieldCoordinateX;
        targets.Y = fieldCoordinateY;
        targets.Z = robotAngle;
        
    }
    
    public void setTargets(Vector3d coordinates) {
        setTargets(coordinates.X, coordinates.Y, coordinates.Z);
    }
    
    public void stop() {
        drive(0,0,0);
    }
    

        
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new driveCmd());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
}
